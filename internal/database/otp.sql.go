// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: otp.sql

package db

import (
	"context"
)

const createOTP = `-- name: CreateOTP :one
INSERT INTO "otp" (
  email,
  otp_code,
  otp_type
) VALUES (
  $1, $2, $3
) RETURNING id, email, otp_code, otp_type, is_used, created_at, expired_at
`

type CreateOTPParams struct {
	Email   string `json:"email"`
	OtpCode string `json:"otp_code"`
	OtpType string `json:"otp_type"`
}

func (q *Queries) CreateOTP(ctx context.Context, arg CreateOTPParams) (Otp, error) {
	row := q.queryRow(ctx, q.createOTPStmt, createOTP, arg.Email, arg.OtpCode, arg.OtpType)
	var i Otp
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.OtpCode,
		&i.OtpType,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const getOTP = `-- name: GetOTP :one
SELECT id, email, otp_code, otp_type, is_used, created_at, expired_at FROM "otp"
WHERE
  otp_code = $1
`

func (q *Queries) GetOTP(ctx context.Context, otpCode string) (Otp, error) {
	row := q.queryRow(ctx, q.getOTPStmt, getOTP, otpCode)
	var i Otp
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.OtpCode,
		&i.OtpType,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const updateOTP = `-- name: UpdateOTP :exec
UPDATE "otp"
SET
  is_used = TRUE
WHERE
  id = $1
  AND is_used = FALSE
  AND expired_at > now()
`

func (q *Queries) UpdateOTP(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.updateOTPStmt, updateOTP, id)
	return err
}
